
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000070  08003234  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08003234  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185c  00000000  00000000  00028374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e7b  00000000  00000000  0002ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b299  00000000  00000000  0003f9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007838a  00000000  00000000  0004ac64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2fee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c0  00000000  00000000  000c3040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003110 	.word	0x08003110

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08003110 	.word	0x08003110

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <DisplayInit>:
// Private variable
static SH1107_t SH1107;

// Constructor for the Adafruit FeatherWing 128x64 OLED
// Initialize Display
uint8_t DisplayInit(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	//if(HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C, 1, 20000) != HAL_OK) {
	//	printf("I2C Not Ready\n");
	//	return(0);
	//}

	if(HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C, 1, 20000) != HAL_OK) {
 8000510:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000514:	2201      	movs	r2, #1
 8000516:	213c      	movs	r1, #60	; 0x3c
 8000518:	4833      	ldr	r0, [pc, #204]	; (80005e8 <DisplayInit+0xdc>)
 800051a:	f001 f941 	bl	80017a0 <HAL_I2C_IsDeviceReady>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d004      	beq.n	800052e <DisplayInit+0x22>
			printf("I2C Not Ready\n");
 8000524:	4831      	ldr	r0, [pc, #196]	; (80005ec <DisplayInit+0xe0>)
 8000526:	f002 f963 	bl	80027f0 <puts>
			return(0);
 800052a:	2300      	movs	r3, #0
 800052c:	e059      	b.n	80005e2 <DisplayInit+0xd6>
		}

	// Init the OLED
	SH1107_WRITECOMMAND(0xAE00); 						// display off, sleep mode
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	203c      	movs	r0, #60	; 0x3c
 8000534:	f000 f914 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xDC0100); 						// set display start line 0
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	203c      	movs	r0, #60	; 0x3c
 800053e:	f000 f90f 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0x81014F); 						// contrast setting = 0x4f
 8000542:	224f      	movs	r2, #79	; 0x4f
 8000544:	2100      	movs	r1, #0
 8000546:	203c      	movs	r0, #60	; 0x3c
 8000548:	f000 f90a 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0x2000); 						// vertical addressing mode (POR=0x20)
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	203c      	movs	r0, #60	; 0x3c
 8000552:	f000 f905 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xA000); 						// segment remap = 1 (POR = 0)
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	203c      	movs	r0, #60	; 0x3c
 800055c:	f000 f900 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xC000); 						// common output scan direction = 0
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	203c      	movs	r0, #60	; 0x3c
 8000566:	f000 f8fb 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xA8017F); 						// multiplex ratio = 128
 800056a:	227f      	movs	r2, #127	; 0x7f
 800056c:	2100      	movs	r1, #0
 800056e:	203c      	movs	r0, #60	; 0x3c
 8000570:	f000 f8f6 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xD30160); 						// set display offset mode = 0x60
 8000574:	2260      	movs	r2, #96	; 0x60
 8000576:	2100      	movs	r1, #0
 8000578:	203c      	movs	r0, #60	; 0x3c
 800057a:	f000 f8f1 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xD50151); 						// divide ratio/oscillator: divide by 2
 800057e:	2251      	movs	r2, #81	; 0x51
 8000580:	2100      	movs	r1, #0
 8000582:	203c      	movs	r0, #60	; 0x3c
 8000584:	f000 f8ec 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xD90122); 						// pre-charge/dis-charge period mode: 2DCLKs/2DCKLs
 8000588:	2222      	movs	r2, #34	; 0x22
 800058a:	2100      	movs	r1, #0
 800058c:	203c      	movs	r0, #60	; 0x3c
 800058e:	f000 f8e7 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xDB0135); 						// VCOM deselect level = 0.770
 8000592:	2235      	movs	r2, #53	; 0x35
 8000594:	2100      	movs	r1, #0
 8000596:	203c      	movs	r0, #60	; 0x3c
 8000598:	f000 f8e2 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xB000); 						// set page address = 0
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	203c      	movs	r0, #60	; 0x3c
 80005a2:	f000 f8dd 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xA400); 						// display off, retain RAM, normal status
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	203c      	movs	r0, #60	; 0x3c
 80005ac:	f000 f8d8 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xA600); 						// normal display
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	203c      	movs	r0, #60	; 0x3c
 80005b6:	f000 f8d3 	bl	8000760 <SH1107_I2C_Write>
	SH1107_WRITECOMMAND(0xAF00);						// DISPLAY ON
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	203c      	movs	r0, #60	; 0x3c
 80005c0:	f000 f8ce 	bl	8000760 <SH1107_I2C_Write>

	/* Clear screen */
	SH1107_Fill(SH1107_COLOR_BLACK);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f843 	bl	8000650 <SH1107_Fill>

	/* Update screen */
	SH1107_UpdateScreen();
 80005ca:	f000 f813 	bl	80005f4 <SH1107_UpdateScreen>

	/* Set default values */
	SH1107.CurrentX = 0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <DisplayInit+0xe4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	801a      	strh	r2, [r3, #0]
	SH1107.CurrentY = 0;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <DisplayInit+0xe4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SH1107.Initialized = 1;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <DisplayInit+0xe4>)
 80005dc:	2201      	movs	r2, #1
 80005de:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000494 	.word	0x20000494
 80005ec:	08003128 	.word	0x08003128
 80005f0:	2000048c 	.word	0x2000048c

080005f4 <SH1107_UpdateScreen>:

void SH1107_UpdateScreen(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e01d      	b.n	800063c <SH1107_UpdateScreen+0x48>
		SH1107_WRITECOMMAND(0xB0 + m);
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3b50      	subs	r3, #80	; 0x50
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	203c      	movs	r0, #60	; 0x3c
 800060c:	f000 f8a8 	bl	8000760 <SH1107_I2C_Write>
		SH1107_WRITECOMMAND(0x00);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	203c      	movs	r0, #60	; 0x3c
 8000616:	f000 f8a3 	bl	8000760 <SH1107_I2C_Write>
		SH1107_WRITECOMMAND(0x10);
 800061a:	2210      	movs	r2, #16
 800061c:	2100      	movs	r1, #0
 800061e:	203c      	movs	r0, #60	; 0x3c
 8000620:	f000 f89e 	bl	8000760 <SH1107_I2C_Write>

		/* Write multi data */
		SH1107_I2C_WriteMulti(OLED_I2C, 0x40, &SH1107_Buffer[SH1107WIDTH * m], SH1107WIDTH);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	01db      	lsls	r3, r3, #7
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <SH1107_UpdateScreen+0x58>)
 800062a:	441a      	add	r2, r3
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	203c      	movs	r0, #60	; 0x3c
 8000632:	f000 f82f 	bl	8000694 <SH1107_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2b07      	cmp	r3, #7
 8000640:	d9de      	bls.n	8000600 <SH1107_UpdateScreen+0xc>
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c

08000650 <SH1107_Fill>:

void SH1107_Fill(SH1107_COLOR_t color) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1107_Buffer, (color == SH1107_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1107_Buffer));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <SH1107_Fill+0x14>
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <SH1107_Fill+0x16>
 8000664:	23ff      	movs	r3, #255	; 0xff
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	4619      	mov	r1, r3
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <SH1107_Fill+0x2c>)
 800066e:	f002 f849 	bl	8002704 <memset>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000008c 	.word	0x2000008c

08000680 <SH1107_Clear>:
	/* Everything OK, zero should be returned */
	return *str;
}

void SH1107_Clear (void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	SH1107_Fill (0);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ffe3 	bl	8000650 <SH1107_Fill>
    SH1107_UpdateScreen();
 800068a:	f7ff ffb3 	bl	80005f4 <SH1107_UpdateScreen>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <SH1107_I2C_WriteMulti>:

void SH1107_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b0c7      	sub	sp, #284	; 0x11c
 8000698:	af02      	add	r7, sp, #8
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80006a2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80006a6:	600a      	str	r2, [r1, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80006b2:	4622      	mov	r2, r4
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006ba:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80006be:	4602      	mov	r2, r0
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80006ca:	460a      	mov	r2, r1
 80006cc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80006ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80006d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80006da:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80006e8:	e015      	b.n	8000716 <SH1107_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80006ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80006ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80006f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80006f6:	6812      	ldr	r2, [r2, #0]
 80006f8:	441a      	add	r2, r3
 80006fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80006fe:	3301      	adds	r3, #1
 8000700:	7811      	ldrb	r1, [r2, #0]
 8000702:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000706:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800070a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800070c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000710:	3301      	adds	r3, #1
 8000712:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000716:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800071a:	b29b      	uxth	r3, r3
 800071c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000720:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000724:	8812      	ldrh	r2, [r2, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d8df      	bhi.n	80006ea <SH1107_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800072a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800072e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b299      	uxth	r1, r3
 8000736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800073a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b29b      	uxth	r3, r3
 8000744:	f107 020c 	add.w	r2, r7, #12
 8000748:	200a      	movs	r0, #10
 800074a:	9000      	str	r0, [sp, #0]
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <SH1107_I2C_WriteMulti+0xc8>)
 800074e:	f000 ff29 	bl	80015a4 <HAL_I2C_Master_Transmit>
}
 8000752:	bf00      	nop
 8000754:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000758:	46bd      	mov	sp, r7
 800075a:	bd90      	pop	{r4, r7, pc}
 800075c:	20000494 	.word	0x20000494

08000760 <SH1107_I2C_Write>:

// Write single command to I2C
void SH1107_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af02      	add	r7, sp, #8
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	460b      	mov	r3, r1
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	b299      	uxth	r1, r3
 800077e:	f107 020c 	add.w	r2, r7, #12
 8000782:	230a      	movs	r3, #10
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2302      	movs	r3, #2
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <SH1107_I2C_Write+0x38>)
 800078a:	f000 ff0b 	bl	80015a4 <HAL_I2C_Master_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000494 	.word	0x20000494

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa98 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f814 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 f89e 	bl	80008e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ac:	f000 f86e 	bl	800088c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DisplayInit();
 80007b0:	f7ff feac 	bl	800050c <DisplayInit>
  SH1107_Clear();
 80007b4:	f7ff ff64 	bl	8000680 <SH1107_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80007b8:	2120      	movs	r1, #32
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <main+0x30>)
 80007bc:	f000 fd93 	bl	80012e6 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f000 faf8 	bl	8000db8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80007c8:	e7f6      	b.n	80007b8 <main+0x1c>
 80007ca:	bf00      	nop
 80007cc:	40020000 	.word	0x40020000

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff90 	bl	8002704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xb4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xb4>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xb4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <SystemClock_Config+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <SystemClock_Config+0xb8>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <SystemClock_Config+0xb8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2310      	movs	r3, #16
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000838:	2300      	movs	r3, #0
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fcb1 	bl	80021a8 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800084c:	f000 f88e 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fad0 	bl	8001e10 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000876:	f000 f879 	bl	800096c <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_I2C1_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x50>)
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x58>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_I2C1_Init+0x50>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_I2C1_Init+0x50>)
 80008ca:	f000 fd27 	bl	800131c <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 f84a 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000494 	.word	0x20000494
 80008e0:	40005400 	.word	0x40005400
 80008e4:	000186a0 	.word	0x000186a0

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <MX_GPIO_Init+0x7c>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_GPIO_Init+0x7c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2120      	movs	r1, #32
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <MX_GPIO_Init+0x80>)
 800093c:	f000 fcba 	bl	80012b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000940:	2320      	movs	r3, #32
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0x80>)
 8000958:	f000 fb38 	bl	8000fcc <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	; 0x30
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_I2C_MspInit+0xe8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a06:	23c0      	movs	r3, #192	; 0xc0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a16:	2304      	movs	r3, #4
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	; (8000ab8 <HAL_I2C_MspInit+0xf0>)
 8000a22:	f000 fad3 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a42:	e031      	b.n	8000aa8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <HAL_I2C_MspInit+0xf4>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a70:	2312      	movs	r3, #18
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <HAL_I2C_MspInit+0xf0>)
 8000a88:	f000 faa0 	bl	8000fcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_I2C_MspInit+0xec>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40005800 	.word	0x40005800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f934 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e00a      	b.n	8000b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b26:	f3af 8000 	nop.w
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf0      	blt.n	8000b26 <_read+0x12>
	}

return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e009      	b.n	8000b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf1      	blt.n	8000b60 <_write+0x12>
	}
	return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f001 fd46 	bl	80026b0 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20008000 	.word	0x20008000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200004e8 	.word	0x200004e8
 8000c58:	20000500 	.word	0x20000500

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f001 fd05 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fd73 	bl	800079c <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	080031c4 	.word	0x080031c4
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	20000500 	.word	0x20000500

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f931 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	200f      	movs	r0, #15
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe36 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93b 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	200004ec 	.word	0x200004ec

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200004ec 	.word	0x200004ec

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e14d      	b.n	8001284 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 813c 	bne.w	800127e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8096 	beq.w	800127e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_GPIO_Init+0x2d0>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x2d0>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b4e      	ldr	r3, [pc, #312]	; (800129c <HAL_GPIO_Init+0x2d0>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <HAL_GPIO_Init+0x2d4>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_GPIO_Init+0x2d8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1ea>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_GPIO_Init+0x2dc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1e6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a41      	ldr	r2, [pc, #260]	; (80012ac <HAL_GPIO_Init+0x2e0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1e2>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x1ec>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x1ec>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x1ec>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x2d4>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_GPIO_Init+0x2e4>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f aeae 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40013c00 	.word	0x40013c00

080012b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	807b      	strh	r3, [r7, #2]
 80012c0:	4613      	mov	r3, r2
 80012c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c4:	787b      	ldrb	r3, [r7, #1]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43d9      	mvns	r1, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	400b      	ands	r3, r1
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e12b      	b.n	8001586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fb40 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2224      	movs	r2, #36	; 0x24
 800134c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800136e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001380:	f000 fefe 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4a81      	ldr	r2, [pc, #516]	; (8001590 <HAL_I2C_Init+0x274>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d807      	bhi.n	80013a0 <HAL_I2C_Init+0x84>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4a80      	ldr	r2, [pc, #512]	; (8001594 <HAL_I2C_Init+0x278>)
 8001394:	4293      	cmp	r3, r2
 8001396:	bf94      	ite	ls
 8001398:	2301      	movls	r3, #1
 800139a:	2300      	movhi	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	e006      	b.n	80013ae <HAL_I2C_Init+0x92>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <HAL_I2C_Init+0x27c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0e7      	b.n	8001586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4a78      	ldr	r2, [pc, #480]	; (800159c <HAL_I2C_Init+0x280>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	; (8001590 <HAL_I2C_Init+0x274>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d802      	bhi.n	80013f0 <HAL_I2C_Init+0xd4>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	e009      	b.n	8001404 <HAL_I2C_Init+0xe8>
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_I2C_Init+0x284>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	3301      	adds	r3, #1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	430b      	orrs	r3, r1
 800140a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	495c      	ldr	r1, [pc, #368]	; (8001590 <HAL_I2C_Init+0x274>)
 8001420:	428b      	cmp	r3, r1
 8001422:	d819      	bhi.n	8001458 <HAL_I2C_Init+0x13c>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e59      	subs	r1, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001432:	1c59      	adds	r1, r3, #1
 8001434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001438:	400b      	ands	r3, r1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <HAL_I2C_Init+0x138>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1e59      	subs	r1, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fbb1 f3f3 	udiv	r3, r1, r3
 800144c:	3301      	adds	r3, #1
 800144e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001452:	e051      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001454:	2304      	movs	r3, #4
 8001456:	e04f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_I2C_Init+0x168>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	440b      	add	r3, r1
 800146e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001472:	3301      	adds	r3, #1
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf0c      	ite	eq
 800147c:	2301      	moveq	r3, #1
 800147e:	2300      	movne	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e012      	b.n	80014aa <HAL_I2C_Init+0x18e>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	0099      	lsls	r1, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	fbb0 f3f3 	udiv	r3, r0, r3
 800149a:	3301      	adds	r3, #1
 800149c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf0c      	ite	eq
 80014a4:	2301      	moveq	r3, #1
 80014a6:	2300      	movne	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Init+0x196>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e022      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10e      	bne.n	80014d8 <HAL_I2C_Init+0x1bc>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e58      	subs	r0, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6859      	ldr	r1, [r3, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d6:	e00f      	b.n	80014f8 <HAL_I2C_Init+0x1dc>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e58      	subs	r0, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	0099      	lsls	r1, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	6809      	ldr	r1, [r1, #0]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69da      	ldr	r2, [r3, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6911      	ldr	r1, [r2, #16]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68d2      	ldr	r2, [r2, #12]
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	000186a0 	.word	0x000186a0
 8001594:	001e847f 	.word	0x001e847f
 8001598:	003d08ff 	.word	0x003d08ff
 800159c:	431bde83 	.word	0x431bde83
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	461a      	mov	r2, r3
 80015b0:	460b      	mov	r3, r1
 80015b2:	817b      	strh	r3, [r7, #10]
 80015b4:	4613      	mov	r3, r2
 80015b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fbf2 	bl	8000da0 <HAL_GetTick>
 80015bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	f040 80e0 	bne.w	800178c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2319      	movs	r3, #25
 80015d2:	2201      	movs	r2, #1
 80015d4:	4970      	ldr	r1, [pc, #448]	; (8001798 <HAL_I2C_Master_Transmit+0x1f4>)
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fa92 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015e2:	2302      	movs	r3, #2
 80015e4:	e0d3      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_I2C_Master_Transmit+0x50>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0cc      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b01      	cmp	r3, #1
 8001608:	d007      	beq.n	800161a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2210      	movs	r2, #16
 8001636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4a50      	ldr	r2, [pc, #320]	; (800179c <HAL_I2C_Master_Transmit+0x1f8>)
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800165c:	8979      	ldrh	r1, [r7, #10]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f9ca 	bl	80019fc <I2C_MasterRequestWrite>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08d      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001688:	e066      	b.n	8001758 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fb0c 	bl	8001cac <I2C_WaitOnTXEFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d107      	bne.n	80016b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06b      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016de:	3b01      	subs	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d11b      	bne.n	800172c <HAL_I2C_Master_Transmit+0x188>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d017      	beq.n	800172c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	6a39      	ldr	r1, [r7, #32]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 fafc 	bl	8001d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00d      	beq.n	8001758 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	2b04      	cmp	r3, #4
 8001742:	d107      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e01a      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	2b00      	cmp	r3, #0
 800175e:	d194      	bne.n	800168a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800176e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e000      	b.n	800178e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800178c:	2302      	movs	r3, #2
  }
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	00100002 	.word	0x00100002
 800179c:	ffff0000 	.word	0xffff0000

080017a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	460b      	mov	r3, r1
 80017ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff faf6 	bl	8000da0 <HAL_GetTick>
 80017b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	f040 8111 	bne.w	80019ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2319      	movs	r3, #25
 80017ce:	2201      	movs	r2, #1
 80017d0:	4988      	ldr	r1, [pc, #544]	; (80019f4 <HAL_I2C_IsDeviceReady+0x254>)
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f994 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	e104      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_I2C_IsDeviceReady+0x50>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0fd      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d007      	beq.n	8001816 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001824:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2224      	movs	r2, #36	; 0x24
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a70      	ldr	r2, [pc, #448]	; (80019f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001848:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f952 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00d      	beq.n	800187e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001870:	d103      	bne.n	800187a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0b6      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800188c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fa87 	bl	8000da0 <HAL_GetTick>
 8001892:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018c2:	e025      	b.n	8001910 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c4:	f7ff fa6c 	bl	8000da0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d302      	bcc.n	80018da <HAL_I2C_IsDeviceReady+0x13a>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	22a0      	movs	r2, #160	; 0xa0
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001906:	bf0c      	ite	eq
 8001908:	2301      	moveq	r3, #1
 800190a:	2300      	movne	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2ba0      	cmp	r3, #160	; 0xa0
 800191a:	d005      	beq.n	8001928 <HAL_I2C_IsDeviceReady+0x188>
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_I2C_IsDeviceReady+0x188>
 8001922:	7dbb      	ldrb	r3, [r7, #22]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0cd      	beq.n	80018c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b02      	cmp	r3, #2
 800193c:	d129      	bne.n	8001992 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2319      	movs	r3, #25
 800196a:	2201      	movs	r2, #1
 800196c:	4921      	ldr	r1, [pc, #132]	; (80019f4 <HAL_I2C_IsDeviceReady+0x254>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f8c6 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e036      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e02c      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2319      	movs	r3, #25
 80019b2:	2201      	movs	r2, #1
 80019b4:	490f      	ldr	r1, [pc, #60]	; (80019f4 <HAL_I2C_IsDeviceReady+0x254>)
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f8a2 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e012      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f4ff af32 	bcc.w	800183a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	00100002 	.word	0x00100002
 80019f8:	ffff0000 	.word	0xffff0000

080019fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d006      	beq.n	8001a26 <I2C_MasterRequestWrite+0x2a>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d003      	beq.n	8001a26 <I2C_MasterRequestWrite+0x2a>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a24:	d108      	bne.n	8001a38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00b      	b.n	8001a50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d107      	bne.n	8001a50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f84f 	bl	8001b00 <I2C_WaitOnFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a76:	d103      	bne.n	8001a80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e035      	b.n	8001af0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a8c:	d108      	bne.n	8001aa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a8e:	897b      	ldrh	r3, [r7, #10]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a9c:	611a      	str	r2, [r3, #16]
 8001a9e:	e01b      	b.n	8001ad8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	11db      	asrs	r3, r3, #7
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 0306 	and.w	r3, r3, #6
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f063 030f 	orn	r3, r3, #15
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <I2C_MasterRequestWrite+0xfc>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f875 	bl	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e010      	b.n	8001af0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <I2C_MasterRequestWrite+0x100>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f865 	bl	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	00010008 	.word	0x00010008
 8001afc:	00010002 	.word	0x00010002

08001b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b10:	e025      	b.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b18:	d021      	beq.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1a:	f7ff f941 	bl	8000da0 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d302      	bcc.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d116      	bne.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f043 0220 	orr.w	r2, r3, #32
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e023      	b.n	8001ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10d      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4013      	ands	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf0c      	ite	eq
 8001b7a:	2301      	moveq	r3, #1
 8001b7c:	2300      	movne	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	e00c      	b.n	8001b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf0c      	ite	eq
 8001b96:	2301      	moveq	r3, #1
 8001b98:	2300      	movne	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d0b6      	beq.n	8001b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bbc:	e051      	b.n	8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d123      	bne.n	8001c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f043 0204 	orr.w	r2, r3, #4
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e046      	b.n	8001ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d021      	beq.n	8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1e:	f7ff f8bf 	bl	8000da0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d302      	bcc.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d116      	bne.n	8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e020      	b.n	8001ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10c      	bne.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4013      	ands	r3, r2
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e00b      	b.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	43da      	mvns	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	4013      	ands	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d18d      	bne.n	8001bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb8:	e02d      	b.n	8001d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f878 	bl	8001db0 <I2C_IsAcknowledgeFailed>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e02d      	b.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd0:	d021      	beq.n	8001d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd2:	f7ff f865 	bl	8000da0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d302      	bcc.n	8001ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d116      	bne.n	8001d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e007      	b.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d1ca      	bne.n	8001cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d3a:	e02d      	b.n	8001d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f837 	bl	8001db0 <I2C_IsAcknowledgeFailed>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e02d      	b.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d52:	d021      	beq.n	8001d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d54:	f7ff f824 	bl	8000da0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d302      	bcc.n	8001d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d116      	bne.n	8001d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e007      	b.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d1ca      	bne.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d11b      	bne.n	8001e00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0cc      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d90c      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b65      	ldr	r3, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d044      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e067      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4934      	ldr	r1, [pc, #208]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7fe ff4e 	bl	8000da0 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe ff4a 	bl	8000da0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e04f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d20c      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b22      	ldr	r3, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe feae 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023c00 	.word	0x40023c00
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08003138 	.word	0x08003138
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe0:	b090      	sub	sp, #64	; 0x40
 8001fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d00d      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x40>
 8002000:	2b08      	cmp	r3, #8
 8002002:	f200 80a1 	bhi.w	8002148 <HAL_RCC_GetSysClockFreq+0x16c>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x34>
 800200a:	2b04      	cmp	r3, #4
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x3a>
 800200e:	e09b      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_GetSysClockFreq+0x184>)
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002014:	e09b      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_GetSysClockFreq+0x188>)
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800201a:	e098      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002026:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d028      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	2200      	movs	r2, #0
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	627a      	str	r2, [r7, #36]	; 0x24
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002044:	2100      	movs	r1, #0
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_GetSysClockFreq+0x188>)
 8002048:	fb03 f201 	mul.w	r2, r3, r1
 800204c:	2300      	movs	r3, #0
 800204e:	fb00 f303 	mul.w	r3, r0, r3
 8002052:	4413      	add	r3, r2
 8002054:	4a43      	ldr	r2, [pc, #268]	; (8002164 <HAL_RCC_GetSysClockFreq+0x188>)
 8002056:	fba0 1202 	umull	r1, r2, r0, r2
 800205a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800205c:	460a      	mov	r2, r1
 800205e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002062:	4413      	add	r3, r2
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	2200      	movs	r2, #0
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	61fa      	str	r2, [r7, #28]
 800206e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002076:	f7fe f8c7 	bl	8000208 <__aeabi_uldivmod>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4613      	mov	r3, r2
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	e053      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	2200      	movs	r2, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	617a      	str	r2, [r7, #20]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002096:	f04f 0b00 	mov.w	fp, #0
 800209a:	4652      	mov	r2, sl
 800209c:	465b      	mov	r3, fp
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0159      	lsls	r1, r3, #5
 80020a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ac:	0150      	lsls	r0, r2, #5
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	ebb2 080a 	subs.w	r8, r2, sl
 80020b6:	eb63 090b 	sbc.w	r9, r3, fp
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020ce:	ebb2 0408 	subs.w	r4, r2, r8
 80020d2:	eb63 0509 	sbc.w	r5, r3, r9
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	00eb      	lsls	r3, r5, #3
 80020e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020e4:	00e2      	lsls	r2, r4, #3
 80020e6:	4614      	mov	r4, r2
 80020e8:	461d      	mov	r5, r3
 80020ea:	eb14 030a 	adds.w	r3, r4, sl
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	eb45 030b 	adc.w	r3, r5, fp
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002102:	4629      	mov	r1, r5
 8002104:	028b      	lsls	r3, r1, #10
 8002106:	4621      	mov	r1, r4
 8002108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800210c:	4621      	mov	r1, r4
 800210e:	028a      	lsls	r2, r1, #10
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	2200      	movs	r2, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002120:	f7fe f872 	bl	8000208 <__aeabi_uldivmod>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4613      	mov	r3, r2
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_GetSysClockFreq+0x180>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800213c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetSysClockFreq+0x184>)
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800214c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002150:	4618      	mov	r0, r3
 8002152:	3740      	adds	r7, #64	; 0x40
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	00f42400 	.word	0x00f42400
 8002164:	017d7840 	.word	0x017d7840

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_GetHCLKFreq+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff0 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0a9b      	lsrs	r3, r3, #10
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08003148 	.word	0x08003148

080021a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e273      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d00c      	beq.n	80021ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d2:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d112      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021de:	4b82      	ldr	r3, [pc, #520]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ea:	d10b      	bne.n	8002204 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d05b      	beq.n	80022b0 <HAL_RCC_OscConfig+0x108>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d157      	bne.n	80022b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e24e      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d106      	bne.n	800221c <HAL_RCC_OscConfig+0x74>
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a75      	ldr	r2, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x98>
 8002226:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6f      	ldr	r2, [pc, #444]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xb0>
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a68      	ldr	r2, [pc, #416]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a65      	ldr	r2, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fd9e 	bl	8000da0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe fd9a 	bl	8000da0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e213      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5b      	ldr	r3, [pc, #364]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xc0>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fd8a 	bl	8000da0 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fd86 	bl	8000da0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1ff      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0xe8>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1d3      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4937      	ldr	r1, [pc, #220]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_RCC_OscConfig+0x244>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fd3f 	bl	8000da0 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fd3b 	bl	8000da0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1b4      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4925      	ldr	r1, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_OscConfig+0x244>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fd1e 	bl	8000da0 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fd1a 	bl	8000da0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e193      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d036      	beq.n	8002400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x248>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fcfe 	bl	8000da0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fcfa 	bl	8000da0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e173      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x200>
 80023c6:	e01b      	b.n	8002400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x248>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7fe fce7 	bl	8000da0 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	e00e      	b.n	80023f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d6:	f7fe fce3 	bl	8000da0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d907      	bls.n	80023f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e15c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470000 	.word	0x42470000
 80023f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b8a      	ldr	r3, [pc, #552]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ea      	bne.n	80023d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8097 	beq.w	800253c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002412:	4b83      	ldr	r3, [pc, #524]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a7e      	ldr	r2, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b7c      	ldr	r3, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <HAL_RCC_OscConfig+0x47c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x47c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x47c>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7fe fca3 	bl	8000da0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe fc9f 	bl	8000da0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e118      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	4b6c      	ldr	r3, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x47c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x2ea>
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	4a65      	ldr	r2, [pc, #404]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	; 0x70
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x324>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b05      	cmp	r3, #5
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x30c>
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a60      	ldr	r2, [pc, #384]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0x324>
 80024b4:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a59      	ldr	r2, [pc, #356]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024c6:	f023 0304 	bic.w	r3, r3, #4
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fe fc64 	bl	8000da0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7fe fc60 	bl	8000da0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0d7      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ee      	beq.n	80024dc <HAL_RCC_OscConfig+0x334>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fc4e 	bl	8000da0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fc4a 	bl	8000da0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0c1      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ee      	bne.n	8002508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a3a      	ldr	r2, [pc, #232]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80ad 	beq.w	80026a0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b08      	cmp	r3, #8
 8002550:	d060      	beq.n	8002614 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d145      	bne.n	80025e6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <HAL_RCC_OscConfig+0x480>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fc1e 	bl	8000da0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fc1a 	bl	8000da0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e093      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	019b      	lsls	r3, r3, #6
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	3b01      	subs	r3, #1
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	071b      	lsls	r3, r3, #28
 80025b2:	491b      	ldr	r1, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x480>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fbef 	bl	8000da0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fbeb 	bl	8000da0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e064      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x41e>
 80025e4:	e05c      	b.n	80026a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_OscConfig+0x480>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fbd8 	bl	8000da0 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fbd4 	bl	8000da0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04d      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCC_OscConfig+0x478>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x44c>
 8002612:	e045      	b.n	80026a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e040      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
 8002620:	40023800 	.word	0x40023800
 8002624:	40007000 	.word	0x40007000
 8002628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d030      	beq.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d129      	bne.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d122      	bne.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002664:	4293      	cmp	r3, r2
 8002666:	d119      	bne.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	3b01      	subs	r3, #1
 8002676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d10f      	bne.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <__errno>:
 80026b0:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <__errno+0x8>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000000c 	.word	0x2000000c

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4d0d      	ldr	r5, [pc, #52]	; (80026f4 <__libc_init_array+0x38>)
 80026c0:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	2600      	movs	r6, #0
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	4d0b      	ldr	r5, [pc, #44]	; (80026fc <__libc_init_array+0x40>)
 80026ce:	4c0c      	ldr	r4, [pc, #48]	; (8002700 <__libc_init_array+0x44>)
 80026d0:	f000 fd1e 	bl	8003110 <_init>
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	2600      	movs	r6, #0
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	080031bc 	.word	0x080031bc
 80026f8:	080031bc 	.word	0x080031bc
 80026fc:	080031bc 	.word	0x080031bc
 8002700:	080031c0 	.word	0x080031c0

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <_puts_r>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	460e      	mov	r6, r1
 8002718:	4605      	mov	r5, r0
 800271a:	b118      	cbz	r0, 8002724 <_puts_r+0x10>
 800271c:	6983      	ldr	r3, [r0, #24]
 800271e:	b90b      	cbnz	r3, 8002724 <_puts_r+0x10>
 8002720:	f000 fa48 	bl	8002bb4 <__sinit>
 8002724:	69ab      	ldr	r3, [r5, #24]
 8002726:	68ac      	ldr	r4, [r5, #8]
 8002728:	b913      	cbnz	r3, 8002730 <_puts_r+0x1c>
 800272a:	4628      	mov	r0, r5
 800272c:	f000 fa42 	bl	8002bb4 <__sinit>
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <_puts_r+0xd0>)
 8002732:	429c      	cmp	r4, r3
 8002734:	d120      	bne.n	8002778 <_puts_r+0x64>
 8002736:	686c      	ldr	r4, [r5, #4]
 8002738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800273a:	07db      	lsls	r3, r3, #31
 800273c:	d405      	bmi.n	800274a <_puts_r+0x36>
 800273e:	89a3      	ldrh	r3, [r4, #12]
 8002740:	0598      	lsls	r0, r3, #22
 8002742:	d402      	bmi.n	800274a <_puts_r+0x36>
 8002744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002746:	f000 fad3 	bl	8002cf0 <__retarget_lock_acquire_recursive>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	0719      	lsls	r1, r3, #28
 800274e:	d51d      	bpl.n	800278c <_puts_r+0x78>
 8002750:	6923      	ldr	r3, [r4, #16]
 8002752:	b1db      	cbz	r3, 800278c <_puts_r+0x78>
 8002754:	3e01      	subs	r6, #1
 8002756:	68a3      	ldr	r3, [r4, #8]
 8002758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800275c:	3b01      	subs	r3, #1
 800275e:	60a3      	str	r3, [r4, #8]
 8002760:	bb39      	cbnz	r1, 80027b2 <_puts_r+0x9e>
 8002762:	2b00      	cmp	r3, #0
 8002764:	da38      	bge.n	80027d8 <_puts_r+0xc4>
 8002766:	4622      	mov	r2, r4
 8002768:	210a      	movs	r1, #10
 800276a:	4628      	mov	r0, r5
 800276c:	f000 f848 	bl	8002800 <__swbuf_r>
 8002770:	3001      	adds	r0, #1
 8002772:	d011      	beq.n	8002798 <_puts_r+0x84>
 8002774:	250a      	movs	r5, #10
 8002776:	e011      	b.n	800279c <_puts_r+0x88>
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <_puts_r+0xd4>)
 800277a:	429c      	cmp	r4, r3
 800277c:	d101      	bne.n	8002782 <_puts_r+0x6e>
 800277e:	68ac      	ldr	r4, [r5, #8]
 8002780:	e7da      	b.n	8002738 <_puts_r+0x24>
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <_puts_r+0xd8>)
 8002784:	429c      	cmp	r4, r3
 8002786:	bf08      	it	eq
 8002788:	68ec      	ldreq	r4, [r5, #12]
 800278a:	e7d5      	b.n	8002738 <_puts_r+0x24>
 800278c:	4621      	mov	r1, r4
 800278e:	4628      	mov	r0, r5
 8002790:	f000 f888 	bl	80028a4 <__swsetup_r>
 8002794:	2800      	cmp	r0, #0
 8002796:	d0dd      	beq.n	8002754 <_puts_r+0x40>
 8002798:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800279c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800279e:	07da      	lsls	r2, r3, #31
 80027a0:	d405      	bmi.n	80027ae <_puts_r+0x9a>
 80027a2:	89a3      	ldrh	r3, [r4, #12]
 80027a4:	059b      	lsls	r3, r3, #22
 80027a6:	d402      	bmi.n	80027ae <_puts_r+0x9a>
 80027a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027aa:	f000 faa2 	bl	8002cf2 <__retarget_lock_release_recursive>
 80027ae:	4628      	mov	r0, r5
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da04      	bge.n	80027c0 <_puts_r+0xac>
 80027b6:	69a2      	ldr	r2, [r4, #24]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dc06      	bgt.n	80027ca <_puts_r+0xb6>
 80027bc:	290a      	cmp	r1, #10
 80027be:	d004      	beq.n	80027ca <_puts_r+0xb6>
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	6022      	str	r2, [r4, #0]
 80027c6:	7019      	strb	r1, [r3, #0]
 80027c8:	e7c5      	b.n	8002756 <_puts_r+0x42>
 80027ca:	4622      	mov	r2, r4
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 f817 	bl	8002800 <__swbuf_r>
 80027d2:	3001      	adds	r0, #1
 80027d4:	d1bf      	bne.n	8002756 <_puts_r+0x42>
 80027d6:	e7df      	b.n	8002798 <_puts_r+0x84>
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	250a      	movs	r5, #10
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	701d      	strb	r5, [r3, #0]
 80027e2:	e7db      	b.n	800279c <_puts_r+0x88>
 80027e4:	08003174 	.word	0x08003174
 80027e8:	08003194 	.word	0x08003194
 80027ec:	08003154 	.word	0x08003154

080027f0 <puts>:
 80027f0:	4b02      	ldr	r3, [pc, #8]	; (80027fc <puts+0xc>)
 80027f2:	4601      	mov	r1, r0
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	f7ff bf8d 	b.w	8002714 <_puts_r>
 80027fa:	bf00      	nop
 80027fc:	2000000c 	.word	0x2000000c

08002800 <__swbuf_r>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	460e      	mov	r6, r1
 8002804:	4614      	mov	r4, r2
 8002806:	4605      	mov	r5, r0
 8002808:	b118      	cbz	r0, 8002812 <__swbuf_r+0x12>
 800280a:	6983      	ldr	r3, [r0, #24]
 800280c:	b90b      	cbnz	r3, 8002812 <__swbuf_r+0x12>
 800280e:	f000 f9d1 	bl	8002bb4 <__sinit>
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <__swbuf_r+0x98>)
 8002814:	429c      	cmp	r4, r3
 8002816:	d12b      	bne.n	8002870 <__swbuf_r+0x70>
 8002818:	686c      	ldr	r4, [r5, #4]
 800281a:	69a3      	ldr	r3, [r4, #24]
 800281c:	60a3      	str	r3, [r4, #8]
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	071a      	lsls	r2, r3, #28
 8002822:	d52f      	bpl.n	8002884 <__swbuf_r+0x84>
 8002824:	6923      	ldr	r3, [r4, #16]
 8002826:	b36b      	cbz	r3, 8002884 <__swbuf_r+0x84>
 8002828:	6923      	ldr	r3, [r4, #16]
 800282a:	6820      	ldr	r0, [r4, #0]
 800282c:	1ac0      	subs	r0, r0, r3
 800282e:	6963      	ldr	r3, [r4, #20]
 8002830:	b2f6      	uxtb	r6, r6
 8002832:	4283      	cmp	r3, r0
 8002834:	4637      	mov	r7, r6
 8002836:	dc04      	bgt.n	8002842 <__swbuf_r+0x42>
 8002838:	4621      	mov	r1, r4
 800283a:	4628      	mov	r0, r5
 800283c:	f000 f926 	bl	8002a8c <_fflush_r>
 8002840:	bb30      	cbnz	r0, 8002890 <__swbuf_r+0x90>
 8002842:	68a3      	ldr	r3, [r4, #8]
 8002844:	3b01      	subs	r3, #1
 8002846:	60a3      	str	r3, [r4, #8]
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	6022      	str	r2, [r4, #0]
 800284e:	701e      	strb	r6, [r3, #0]
 8002850:	6963      	ldr	r3, [r4, #20]
 8002852:	3001      	adds	r0, #1
 8002854:	4283      	cmp	r3, r0
 8002856:	d004      	beq.n	8002862 <__swbuf_r+0x62>
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	07db      	lsls	r3, r3, #31
 800285c:	d506      	bpl.n	800286c <__swbuf_r+0x6c>
 800285e:	2e0a      	cmp	r6, #10
 8002860:	d104      	bne.n	800286c <__swbuf_r+0x6c>
 8002862:	4621      	mov	r1, r4
 8002864:	4628      	mov	r0, r5
 8002866:	f000 f911 	bl	8002a8c <_fflush_r>
 800286a:	b988      	cbnz	r0, 8002890 <__swbuf_r+0x90>
 800286c:	4638      	mov	r0, r7
 800286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <__swbuf_r+0x9c>)
 8002872:	429c      	cmp	r4, r3
 8002874:	d101      	bne.n	800287a <__swbuf_r+0x7a>
 8002876:	68ac      	ldr	r4, [r5, #8]
 8002878:	e7cf      	b.n	800281a <__swbuf_r+0x1a>
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <__swbuf_r+0xa0>)
 800287c:	429c      	cmp	r4, r3
 800287e:	bf08      	it	eq
 8002880:	68ec      	ldreq	r4, [r5, #12]
 8002882:	e7ca      	b.n	800281a <__swbuf_r+0x1a>
 8002884:	4621      	mov	r1, r4
 8002886:	4628      	mov	r0, r5
 8002888:	f000 f80c 	bl	80028a4 <__swsetup_r>
 800288c:	2800      	cmp	r0, #0
 800288e:	d0cb      	beq.n	8002828 <__swbuf_r+0x28>
 8002890:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002894:	e7ea      	b.n	800286c <__swbuf_r+0x6c>
 8002896:	bf00      	nop
 8002898:	08003174 	.word	0x08003174
 800289c:	08003194 	.word	0x08003194
 80028a0:	08003154 	.word	0x08003154

080028a4 <__swsetup_r>:
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <__swsetup_r+0xcc>)
 80028a6:	b570      	push	{r4, r5, r6, lr}
 80028a8:	681d      	ldr	r5, [r3, #0]
 80028aa:	4606      	mov	r6, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	b125      	cbz	r5, 80028ba <__swsetup_r+0x16>
 80028b0:	69ab      	ldr	r3, [r5, #24]
 80028b2:	b913      	cbnz	r3, 80028ba <__swsetup_r+0x16>
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 f97d 	bl	8002bb4 <__sinit>
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <__swsetup_r+0xd0>)
 80028bc:	429c      	cmp	r4, r3
 80028be:	d10f      	bne.n	80028e0 <__swsetup_r+0x3c>
 80028c0:	686c      	ldr	r4, [r5, #4]
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028c8:	0719      	lsls	r1, r3, #28
 80028ca:	d42c      	bmi.n	8002926 <__swsetup_r+0x82>
 80028cc:	06dd      	lsls	r5, r3, #27
 80028ce:	d411      	bmi.n	80028f4 <__swsetup_r+0x50>
 80028d0:	2309      	movs	r3, #9
 80028d2:	6033      	str	r3, [r6, #0]
 80028d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028de:	e03e      	b.n	800295e <__swsetup_r+0xba>
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <__swsetup_r+0xd4>)
 80028e2:	429c      	cmp	r4, r3
 80028e4:	d101      	bne.n	80028ea <__swsetup_r+0x46>
 80028e6:	68ac      	ldr	r4, [r5, #8]
 80028e8:	e7eb      	b.n	80028c2 <__swsetup_r+0x1e>
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <__swsetup_r+0xd8>)
 80028ec:	429c      	cmp	r4, r3
 80028ee:	bf08      	it	eq
 80028f0:	68ec      	ldreq	r4, [r5, #12]
 80028f2:	e7e6      	b.n	80028c2 <__swsetup_r+0x1e>
 80028f4:	0758      	lsls	r0, r3, #29
 80028f6:	d512      	bpl.n	800291e <__swsetup_r+0x7a>
 80028f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028fa:	b141      	cbz	r1, 800290e <__swsetup_r+0x6a>
 80028fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002900:	4299      	cmp	r1, r3
 8002902:	d002      	beq.n	800290a <__swsetup_r+0x66>
 8002904:	4630      	mov	r0, r6
 8002906:	f000 fa5b 	bl	8002dc0 <_free_r>
 800290a:	2300      	movs	r3, #0
 800290c:	6363      	str	r3, [r4, #52]	; 0x34
 800290e:	89a3      	ldrh	r3, [r4, #12]
 8002910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002914:	81a3      	strh	r3, [r4, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	6063      	str	r3, [r4, #4]
 800291a:	6923      	ldr	r3, [r4, #16]
 800291c:	6023      	str	r3, [r4, #0]
 800291e:	89a3      	ldrh	r3, [r4, #12]
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	81a3      	strh	r3, [r4, #12]
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	b94b      	cbnz	r3, 800293e <__swsetup_r+0x9a>
 800292a:	89a3      	ldrh	r3, [r4, #12]
 800292c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d003      	beq.n	800293e <__swsetup_r+0x9a>
 8002936:	4621      	mov	r1, r4
 8002938:	4630      	mov	r0, r6
 800293a:	f000 fa01 	bl	8002d40 <__smakebuf_r>
 800293e:	89a0      	ldrh	r0, [r4, #12]
 8002940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002944:	f010 0301 	ands.w	r3, r0, #1
 8002948:	d00a      	beq.n	8002960 <__swsetup_r+0xbc>
 800294a:	2300      	movs	r3, #0
 800294c:	60a3      	str	r3, [r4, #8]
 800294e:	6963      	ldr	r3, [r4, #20]
 8002950:	425b      	negs	r3, r3
 8002952:	61a3      	str	r3, [r4, #24]
 8002954:	6923      	ldr	r3, [r4, #16]
 8002956:	b943      	cbnz	r3, 800296a <__swsetup_r+0xc6>
 8002958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800295c:	d1ba      	bne.n	80028d4 <__swsetup_r+0x30>
 800295e:	bd70      	pop	{r4, r5, r6, pc}
 8002960:	0781      	lsls	r1, r0, #30
 8002962:	bf58      	it	pl
 8002964:	6963      	ldrpl	r3, [r4, #20]
 8002966:	60a3      	str	r3, [r4, #8]
 8002968:	e7f4      	b.n	8002954 <__swsetup_r+0xb0>
 800296a:	2000      	movs	r0, #0
 800296c:	e7f7      	b.n	800295e <__swsetup_r+0xba>
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c
 8002974:	08003174 	.word	0x08003174
 8002978:	08003194 	.word	0x08003194
 800297c:	08003154 	.word	0x08003154

08002980 <__sflush_r>:
 8002980:	898a      	ldrh	r2, [r1, #12]
 8002982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002986:	4605      	mov	r5, r0
 8002988:	0710      	lsls	r0, r2, #28
 800298a:	460c      	mov	r4, r1
 800298c:	d458      	bmi.n	8002a40 <__sflush_r+0xc0>
 800298e:	684b      	ldr	r3, [r1, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	dc05      	bgt.n	80029a0 <__sflush_r+0x20>
 8002994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	dc02      	bgt.n	80029a0 <__sflush_r+0x20>
 800299a:	2000      	movs	r0, #0
 800299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029a2:	2e00      	cmp	r6, #0
 80029a4:	d0f9      	beq.n	800299a <__sflush_r+0x1a>
 80029a6:	2300      	movs	r3, #0
 80029a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029ac:	682f      	ldr	r7, [r5, #0]
 80029ae:	602b      	str	r3, [r5, #0]
 80029b0:	d032      	beq.n	8002a18 <__sflush_r+0x98>
 80029b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	075a      	lsls	r2, r3, #29
 80029b8:	d505      	bpl.n	80029c6 <__sflush_r+0x46>
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	1ac0      	subs	r0, r0, r3
 80029be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029c0:	b10b      	cbz	r3, 80029c6 <__sflush_r+0x46>
 80029c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029c4:	1ac0      	subs	r0, r0, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	4602      	mov	r2, r0
 80029ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029cc:	6a21      	ldr	r1, [r4, #32]
 80029ce:	4628      	mov	r0, r5
 80029d0:	47b0      	blx	r6
 80029d2:	1c43      	adds	r3, r0, #1
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	d106      	bne.n	80029e6 <__sflush_r+0x66>
 80029d8:	6829      	ldr	r1, [r5, #0]
 80029da:	291d      	cmp	r1, #29
 80029dc:	d82c      	bhi.n	8002a38 <__sflush_r+0xb8>
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <__sflush_r+0x108>)
 80029e0:	40ca      	lsrs	r2, r1
 80029e2:	07d6      	lsls	r6, r2, #31
 80029e4:	d528      	bpl.n	8002a38 <__sflush_r+0xb8>
 80029e6:	2200      	movs	r2, #0
 80029e8:	6062      	str	r2, [r4, #4]
 80029ea:	04d9      	lsls	r1, r3, #19
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	6022      	str	r2, [r4, #0]
 80029f0:	d504      	bpl.n	80029fc <__sflush_r+0x7c>
 80029f2:	1c42      	adds	r2, r0, #1
 80029f4:	d101      	bne.n	80029fa <__sflush_r+0x7a>
 80029f6:	682b      	ldr	r3, [r5, #0]
 80029f8:	b903      	cbnz	r3, 80029fc <__sflush_r+0x7c>
 80029fa:	6560      	str	r0, [r4, #84]	; 0x54
 80029fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029fe:	602f      	str	r7, [r5, #0]
 8002a00:	2900      	cmp	r1, #0
 8002a02:	d0ca      	beq.n	800299a <__sflush_r+0x1a>
 8002a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a08:	4299      	cmp	r1, r3
 8002a0a:	d002      	beq.n	8002a12 <__sflush_r+0x92>
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 f9d7 	bl	8002dc0 <_free_r>
 8002a12:	2000      	movs	r0, #0
 8002a14:	6360      	str	r0, [r4, #52]	; 0x34
 8002a16:	e7c1      	b.n	800299c <__sflush_r+0x1c>
 8002a18:	6a21      	ldr	r1, [r4, #32]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	47b0      	blx	r6
 8002a20:	1c41      	adds	r1, r0, #1
 8002a22:	d1c7      	bne.n	80029b4 <__sflush_r+0x34>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0c4      	beq.n	80029b4 <__sflush_r+0x34>
 8002a2a:	2b1d      	cmp	r3, #29
 8002a2c:	d001      	beq.n	8002a32 <__sflush_r+0xb2>
 8002a2e:	2b16      	cmp	r3, #22
 8002a30:	d101      	bne.n	8002a36 <__sflush_r+0xb6>
 8002a32:	602f      	str	r7, [r5, #0]
 8002a34:	e7b1      	b.n	800299a <__sflush_r+0x1a>
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3c:	81a3      	strh	r3, [r4, #12]
 8002a3e:	e7ad      	b.n	800299c <__sflush_r+0x1c>
 8002a40:	690f      	ldr	r7, [r1, #16]
 8002a42:	2f00      	cmp	r7, #0
 8002a44:	d0a9      	beq.n	800299a <__sflush_r+0x1a>
 8002a46:	0793      	lsls	r3, r2, #30
 8002a48:	680e      	ldr	r6, [r1, #0]
 8002a4a:	bf08      	it	eq
 8002a4c:	694b      	ldreq	r3, [r1, #20]
 8002a4e:	600f      	str	r7, [r1, #0]
 8002a50:	bf18      	it	ne
 8002a52:	2300      	movne	r3, #0
 8002a54:	eba6 0807 	sub.w	r8, r6, r7
 8002a58:	608b      	str	r3, [r1, #8]
 8002a5a:	f1b8 0f00 	cmp.w	r8, #0
 8002a5e:	dd9c      	ble.n	800299a <__sflush_r+0x1a>
 8002a60:	6a21      	ldr	r1, [r4, #32]
 8002a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a64:	4643      	mov	r3, r8
 8002a66:	463a      	mov	r2, r7
 8002a68:	4628      	mov	r0, r5
 8002a6a:	47b0      	blx	r6
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	dc06      	bgt.n	8002a7e <__sflush_r+0xfe>
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a76:	81a3      	strh	r3, [r4, #12]
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	e78e      	b.n	800299c <__sflush_r+0x1c>
 8002a7e:	4407      	add	r7, r0
 8002a80:	eba8 0800 	sub.w	r8, r8, r0
 8002a84:	e7e9      	b.n	8002a5a <__sflush_r+0xda>
 8002a86:	bf00      	nop
 8002a88:	20400001 	.word	0x20400001

08002a8c <_fflush_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	4605      	mov	r5, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	b913      	cbnz	r3, 8002a9c <_fflush_r+0x10>
 8002a96:	2500      	movs	r5, #0
 8002a98:	4628      	mov	r0, r5
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	b118      	cbz	r0, 8002aa6 <_fflush_r+0x1a>
 8002a9e:	6983      	ldr	r3, [r0, #24]
 8002aa0:	b90b      	cbnz	r3, 8002aa6 <_fflush_r+0x1a>
 8002aa2:	f000 f887 	bl	8002bb4 <__sinit>
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <_fflush_r+0x6c>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	d11b      	bne.n	8002ae4 <_fflush_r+0x58>
 8002aac:	686c      	ldr	r4, [r5, #4]
 8002aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ef      	beq.n	8002a96 <_fflush_r+0xa>
 8002ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ab8:	07d0      	lsls	r0, r2, #31
 8002aba:	d404      	bmi.n	8002ac6 <_fflush_r+0x3a>
 8002abc:	0599      	lsls	r1, r3, #22
 8002abe:	d402      	bmi.n	8002ac6 <_fflush_r+0x3a>
 8002ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ac2:	f000 f915 	bl	8002cf0 <__retarget_lock_acquire_recursive>
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	4621      	mov	r1, r4
 8002aca:	f7ff ff59 	bl	8002980 <__sflush_r>
 8002ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ad0:	07da      	lsls	r2, r3, #31
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	d4e0      	bmi.n	8002a98 <_fflush_r+0xc>
 8002ad6:	89a3      	ldrh	r3, [r4, #12]
 8002ad8:	059b      	lsls	r3, r3, #22
 8002ada:	d4dd      	bmi.n	8002a98 <_fflush_r+0xc>
 8002adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ade:	f000 f908 	bl	8002cf2 <__retarget_lock_release_recursive>
 8002ae2:	e7d9      	b.n	8002a98 <_fflush_r+0xc>
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <_fflush_r+0x70>)
 8002ae6:	429c      	cmp	r4, r3
 8002ae8:	d101      	bne.n	8002aee <_fflush_r+0x62>
 8002aea:	68ac      	ldr	r4, [r5, #8]
 8002aec:	e7df      	b.n	8002aae <_fflush_r+0x22>
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <_fflush_r+0x74>)
 8002af0:	429c      	cmp	r4, r3
 8002af2:	bf08      	it	eq
 8002af4:	68ec      	ldreq	r4, [r5, #12]
 8002af6:	e7da      	b.n	8002aae <_fflush_r+0x22>
 8002af8:	08003174 	.word	0x08003174
 8002afc:	08003194 	.word	0x08003194
 8002b00:	08003154 	.word	0x08003154

08002b04 <std>:
 8002b04:	2300      	movs	r3, #0
 8002b06:	b510      	push	{r4, lr}
 8002b08:	4604      	mov	r4, r0
 8002b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b12:	6083      	str	r3, [r0, #8]
 8002b14:	8181      	strh	r1, [r0, #12]
 8002b16:	6643      	str	r3, [r0, #100]	; 0x64
 8002b18:	81c2      	strh	r2, [r0, #14]
 8002b1a:	6183      	str	r3, [r0, #24]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	2208      	movs	r2, #8
 8002b20:	305c      	adds	r0, #92	; 0x5c
 8002b22:	f7ff fdef 	bl	8002704 <memset>
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <std+0x38>)
 8002b28:	6263      	str	r3, [r4, #36]	; 0x24
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <std+0x3c>)
 8002b2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <std+0x40>)
 8002b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <std+0x44>)
 8002b34:	6224      	str	r4, [r4, #32]
 8002b36:	6323      	str	r3, [r4, #48]	; 0x30
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08002fa1 	.word	0x08002fa1
 8002b40:	08002fc3 	.word	0x08002fc3
 8002b44:	08002ffb 	.word	0x08002ffb
 8002b48:	0800301f 	.word	0x0800301f

08002b4c <_cleanup_r>:
 8002b4c:	4901      	ldr	r1, [pc, #4]	; (8002b54 <_cleanup_r+0x8>)
 8002b4e:	f000 b8af 	b.w	8002cb0 <_fwalk_reent>
 8002b52:	bf00      	nop
 8002b54:	08002a8d 	.word	0x08002a8d

08002b58 <__sfmoreglue>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	2268      	movs	r2, #104	; 0x68
 8002b5c:	1e4d      	subs	r5, r1, #1
 8002b5e:	4355      	muls	r5, r2
 8002b60:	460e      	mov	r6, r1
 8002b62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b66:	f000 f997 	bl	8002e98 <_malloc_r>
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	b140      	cbz	r0, 8002b80 <__sfmoreglue+0x28>
 8002b6e:	2100      	movs	r1, #0
 8002b70:	e9c0 1600 	strd	r1, r6, [r0]
 8002b74:	300c      	adds	r0, #12
 8002b76:	60a0      	str	r0, [r4, #8]
 8002b78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b7c:	f7ff fdc2 	bl	8002704 <memset>
 8002b80:	4620      	mov	r0, r4
 8002b82:	bd70      	pop	{r4, r5, r6, pc}

08002b84 <__sfp_lock_acquire>:
 8002b84:	4801      	ldr	r0, [pc, #4]	; (8002b8c <__sfp_lock_acquire+0x8>)
 8002b86:	f000 b8b3 	b.w	8002cf0 <__retarget_lock_acquire_recursive>
 8002b8a:	bf00      	nop
 8002b8c:	200004f1 	.word	0x200004f1

08002b90 <__sfp_lock_release>:
 8002b90:	4801      	ldr	r0, [pc, #4]	; (8002b98 <__sfp_lock_release+0x8>)
 8002b92:	f000 b8ae 	b.w	8002cf2 <__retarget_lock_release_recursive>
 8002b96:	bf00      	nop
 8002b98:	200004f1 	.word	0x200004f1

08002b9c <__sinit_lock_acquire>:
 8002b9c:	4801      	ldr	r0, [pc, #4]	; (8002ba4 <__sinit_lock_acquire+0x8>)
 8002b9e:	f000 b8a7 	b.w	8002cf0 <__retarget_lock_acquire_recursive>
 8002ba2:	bf00      	nop
 8002ba4:	200004f2 	.word	0x200004f2

08002ba8 <__sinit_lock_release>:
 8002ba8:	4801      	ldr	r0, [pc, #4]	; (8002bb0 <__sinit_lock_release+0x8>)
 8002baa:	f000 b8a2 	b.w	8002cf2 <__retarget_lock_release_recursive>
 8002bae:	bf00      	nop
 8002bb0:	200004f2 	.word	0x200004f2

08002bb4 <__sinit>:
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	f7ff fff0 	bl	8002b9c <__sinit_lock_acquire>
 8002bbc:	69a3      	ldr	r3, [r4, #24]
 8002bbe:	b11b      	cbz	r3, 8002bc8 <__sinit+0x14>
 8002bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc4:	f7ff bff0 	b.w	8002ba8 <__sinit_lock_release>
 8002bc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002bcc:	6523      	str	r3, [r4, #80]	; 0x50
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <__sinit+0x68>)
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <__sinit+0x6c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	bf04      	itt	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	61a3      	streq	r3, [r4, #24]
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 f820 	bl	8002c24 <__sfp>
 8002be4:	6060      	str	r0, [r4, #4]
 8002be6:	4620      	mov	r0, r4
 8002be8:	f000 f81c 	bl	8002c24 <__sfp>
 8002bec:	60a0      	str	r0, [r4, #8]
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f000 f818 	bl	8002c24 <__sfp>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60e0      	str	r0, [r4, #12]
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	6860      	ldr	r0, [r4, #4]
 8002bfc:	f7ff ff82 	bl	8002b04 <std>
 8002c00:	68a0      	ldr	r0, [r4, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	2109      	movs	r1, #9
 8002c06:	f7ff ff7d 	bl	8002b04 <std>
 8002c0a:	68e0      	ldr	r0, [r4, #12]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	2112      	movs	r1, #18
 8002c10:	f7ff ff78 	bl	8002b04 <std>
 8002c14:	2301      	movs	r3, #1
 8002c16:	61a3      	str	r3, [r4, #24]
 8002c18:	e7d2      	b.n	8002bc0 <__sinit+0xc>
 8002c1a:	bf00      	nop
 8002c1c:	08003150 	.word	0x08003150
 8002c20:	08002b4d 	.word	0x08002b4d

08002c24 <__sfp>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	4607      	mov	r7, r0
 8002c28:	f7ff ffac 	bl	8002b84 <__sfp_lock_acquire>
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <__sfp+0x84>)
 8002c2e:	681e      	ldr	r6, [r3, #0]
 8002c30:	69b3      	ldr	r3, [r6, #24]
 8002c32:	b913      	cbnz	r3, 8002c3a <__sfp+0x16>
 8002c34:	4630      	mov	r0, r6
 8002c36:	f7ff ffbd 	bl	8002bb4 <__sinit>
 8002c3a:	3648      	adds	r6, #72	; 0x48
 8002c3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	d503      	bpl.n	8002c4c <__sfp+0x28>
 8002c44:	6833      	ldr	r3, [r6, #0]
 8002c46:	b30b      	cbz	r3, 8002c8c <__sfp+0x68>
 8002c48:	6836      	ldr	r6, [r6, #0]
 8002c4a:	e7f7      	b.n	8002c3c <__sfp+0x18>
 8002c4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002c50:	b9d5      	cbnz	r5, 8002c88 <__sfp+0x64>
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <__sfp+0x88>)
 8002c54:	60e3      	str	r3, [r4, #12]
 8002c56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002c5a:	6665      	str	r5, [r4, #100]	; 0x64
 8002c5c:	f000 f847 	bl	8002cee <__retarget_lock_init_recursive>
 8002c60:	f7ff ff96 	bl	8002b90 <__sfp_lock_release>
 8002c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c6c:	6025      	str	r5, [r4, #0]
 8002c6e:	61a5      	str	r5, [r4, #24]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4629      	mov	r1, r5
 8002c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c78:	f7ff fd44 	bl	8002704 <memset>
 8002c7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c84:	4620      	mov	r0, r4
 8002c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c88:	3468      	adds	r4, #104	; 0x68
 8002c8a:	e7d9      	b.n	8002c40 <__sfp+0x1c>
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	4638      	mov	r0, r7
 8002c90:	f7ff ff62 	bl	8002b58 <__sfmoreglue>
 8002c94:	4604      	mov	r4, r0
 8002c96:	6030      	str	r0, [r6, #0]
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d1d5      	bne.n	8002c48 <__sfp+0x24>
 8002c9c:	f7ff ff78 	bl	8002b90 <__sfp_lock_release>
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	e7ee      	b.n	8002c84 <__sfp+0x60>
 8002ca6:	bf00      	nop
 8002ca8:	08003150 	.word	0x08003150
 8002cac:	ffff0001 	.word	0xffff0001

08002cb0 <_fwalk_reent>:
 8002cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	4688      	mov	r8, r1
 8002cb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002cbc:	2700      	movs	r7, #0
 8002cbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8002cc6:	d505      	bpl.n	8002cd4 <_fwalk_reent+0x24>
 8002cc8:	6824      	ldr	r4, [r4, #0]
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d1f7      	bne.n	8002cbe <_fwalk_reent+0xe>
 8002cce:	4638      	mov	r0, r7
 8002cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cd4:	89ab      	ldrh	r3, [r5, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d907      	bls.n	8002cea <_fwalk_reent+0x3a>
 8002cda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	d003      	beq.n	8002cea <_fwalk_reent+0x3a>
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	47c0      	blx	r8
 8002ce8:	4307      	orrs	r7, r0
 8002cea:	3568      	adds	r5, #104	; 0x68
 8002cec:	e7e9      	b.n	8002cc2 <_fwalk_reent+0x12>

08002cee <__retarget_lock_init_recursive>:
 8002cee:	4770      	bx	lr

08002cf0 <__retarget_lock_acquire_recursive>:
 8002cf0:	4770      	bx	lr

08002cf2 <__retarget_lock_release_recursive>:
 8002cf2:	4770      	bx	lr

08002cf4 <__swhatbuf_r>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	460e      	mov	r6, r1
 8002cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	b096      	sub	sp, #88	; 0x58
 8002d00:	4614      	mov	r4, r2
 8002d02:	461d      	mov	r5, r3
 8002d04:	da08      	bge.n	8002d18 <__swhatbuf_r+0x24>
 8002d06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	602a      	str	r2, [r5, #0]
 8002d0e:	061a      	lsls	r2, r3, #24
 8002d10:	d410      	bmi.n	8002d34 <__swhatbuf_r+0x40>
 8002d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d16:	e00e      	b.n	8002d36 <__swhatbuf_r+0x42>
 8002d18:	466a      	mov	r2, sp
 8002d1a:	f000 f9a7 	bl	800306c <_fstat_r>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	dbf1      	blt.n	8002d06 <__swhatbuf_r+0x12>
 8002d22:	9a01      	ldr	r2, [sp, #4]
 8002d24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d2c:	425a      	negs	r2, r3
 8002d2e:	415a      	adcs	r2, r3
 8002d30:	602a      	str	r2, [r5, #0]
 8002d32:	e7ee      	b.n	8002d12 <__swhatbuf_r+0x1e>
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	2000      	movs	r0, #0
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	b016      	add	sp, #88	; 0x58
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d40 <__smakebuf_r>:
 8002d40:	898b      	ldrh	r3, [r1, #12]
 8002d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d44:	079d      	lsls	r5, r3, #30
 8002d46:	4606      	mov	r6, r0
 8002d48:	460c      	mov	r4, r1
 8002d4a:	d507      	bpl.n	8002d5c <__smakebuf_r+0x1c>
 8002d4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	6123      	str	r3, [r4, #16]
 8002d54:	2301      	movs	r3, #1
 8002d56:	6163      	str	r3, [r4, #20]
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	ab01      	add	r3, sp, #4
 8002d5e:	466a      	mov	r2, sp
 8002d60:	f7ff ffc8 	bl	8002cf4 <__swhatbuf_r>
 8002d64:	9900      	ldr	r1, [sp, #0]
 8002d66:	4605      	mov	r5, r0
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 f895 	bl	8002e98 <_malloc_r>
 8002d6e:	b948      	cbnz	r0, 8002d84 <__smakebuf_r+0x44>
 8002d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d74:	059a      	lsls	r2, r3, #22
 8002d76:	d4ef      	bmi.n	8002d58 <__smakebuf_r+0x18>
 8002d78:	f023 0303 	bic.w	r3, r3, #3
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	e7e3      	b.n	8002d4c <__smakebuf_r+0xc>
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <__smakebuf_r+0x7c>)
 8002d86:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	6020      	str	r0, [r4, #0]
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d90:	81a3      	strh	r3, [r4, #12]
 8002d92:	9b00      	ldr	r3, [sp, #0]
 8002d94:	6163      	str	r3, [r4, #20]
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	6120      	str	r0, [r4, #16]
 8002d9a:	b15b      	cbz	r3, 8002db4 <__smakebuf_r+0x74>
 8002d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002da0:	4630      	mov	r0, r6
 8002da2:	f000 f975 	bl	8003090 <_isatty_r>
 8002da6:	b128      	cbz	r0, 8002db4 <__smakebuf_r+0x74>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	f023 0303 	bic.w	r3, r3, #3
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	81a3      	strh	r3, [r4, #12]
 8002db4:	89a0      	ldrh	r0, [r4, #12]
 8002db6:	4305      	orrs	r5, r0
 8002db8:	81a5      	strh	r5, [r4, #12]
 8002dba:	e7cd      	b.n	8002d58 <__smakebuf_r+0x18>
 8002dbc:	08002b4d 	.word	0x08002b4d

08002dc0 <_free_r>:
 8002dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dc2:	2900      	cmp	r1, #0
 8002dc4:	d044      	beq.n	8002e50 <_free_r+0x90>
 8002dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dca:	9001      	str	r0, [sp, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f1a1 0404 	sub.w	r4, r1, #4
 8002dd2:	bfb8      	it	lt
 8002dd4:	18e4      	addlt	r4, r4, r3
 8002dd6:	f000 f97d 	bl	80030d4 <__malloc_lock>
 8002dda:	4a1e      	ldr	r2, [pc, #120]	; (8002e54 <_free_r+0x94>)
 8002ddc:	9801      	ldr	r0, [sp, #4]
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	b933      	cbnz	r3, 8002df0 <_free_r+0x30>
 8002de2:	6063      	str	r3, [r4, #4]
 8002de4:	6014      	str	r4, [r2, #0]
 8002de6:	b003      	add	sp, #12
 8002de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dec:	f000 b978 	b.w	80030e0 <__malloc_unlock>
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	d908      	bls.n	8002e06 <_free_r+0x46>
 8002df4:	6825      	ldr	r5, [r4, #0]
 8002df6:	1961      	adds	r1, r4, r5
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	bf01      	itttt	eq
 8002dfc:	6819      	ldreq	r1, [r3, #0]
 8002dfe:	685b      	ldreq	r3, [r3, #4]
 8002e00:	1949      	addeq	r1, r1, r5
 8002e02:	6021      	streq	r1, [r4, #0]
 8002e04:	e7ed      	b.n	8002de2 <_free_r+0x22>
 8002e06:	461a      	mov	r2, r3
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b10b      	cbz	r3, 8002e10 <_free_r+0x50>
 8002e0c:	42a3      	cmp	r3, r4
 8002e0e:	d9fa      	bls.n	8002e06 <_free_r+0x46>
 8002e10:	6811      	ldr	r1, [r2, #0]
 8002e12:	1855      	adds	r5, r2, r1
 8002e14:	42a5      	cmp	r5, r4
 8002e16:	d10b      	bne.n	8002e30 <_free_r+0x70>
 8002e18:	6824      	ldr	r4, [r4, #0]
 8002e1a:	4421      	add	r1, r4
 8002e1c:	1854      	adds	r4, r2, r1
 8002e1e:	42a3      	cmp	r3, r4
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	d1e0      	bne.n	8002de6 <_free_r+0x26>
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	6053      	str	r3, [r2, #4]
 8002e2a:	4421      	add	r1, r4
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	e7da      	b.n	8002de6 <_free_r+0x26>
 8002e30:	d902      	bls.n	8002e38 <_free_r+0x78>
 8002e32:	230c      	movs	r3, #12
 8002e34:	6003      	str	r3, [r0, #0]
 8002e36:	e7d6      	b.n	8002de6 <_free_r+0x26>
 8002e38:	6825      	ldr	r5, [r4, #0]
 8002e3a:	1961      	adds	r1, r4, r5
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	bf04      	itt	eq
 8002e40:	6819      	ldreq	r1, [r3, #0]
 8002e42:	685b      	ldreq	r3, [r3, #4]
 8002e44:	6063      	str	r3, [r4, #4]
 8002e46:	bf04      	itt	eq
 8002e48:	1949      	addeq	r1, r1, r5
 8002e4a:	6021      	streq	r1, [r4, #0]
 8002e4c:	6054      	str	r4, [r2, #4]
 8002e4e:	e7ca      	b.n	8002de6 <_free_r+0x26>
 8002e50:	b003      	add	sp, #12
 8002e52:	bd30      	pop	{r4, r5, pc}
 8002e54:	200004f4 	.word	0x200004f4

08002e58 <sbrk_aligned>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4e0e      	ldr	r6, [pc, #56]	; (8002e94 <sbrk_aligned+0x3c>)
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	6831      	ldr	r1, [r6, #0]
 8002e60:	4605      	mov	r5, r0
 8002e62:	b911      	cbnz	r1, 8002e6a <sbrk_aligned+0x12>
 8002e64:	f000 f88c 	bl	8002f80 <_sbrk_r>
 8002e68:	6030      	str	r0, [r6, #0]
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f887 	bl	8002f80 <_sbrk_r>
 8002e72:	1c43      	adds	r3, r0, #1
 8002e74:	d00a      	beq.n	8002e8c <sbrk_aligned+0x34>
 8002e76:	1cc4      	adds	r4, r0, #3
 8002e78:	f024 0403 	bic.w	r4, r4, #3
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d007      	beq.n	8002e90 <sbrk_aligned+0x38>
 8002e80:	1a21      	subs	r1, r4, r0
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f87c 	bl	8002f80 <_sbrk_r>
 8002e88:	3001      	adds	r0, #1
 8002e8a:	d101      	bne.n	8002e90 <sbrk_aligned+0x38>
 8002e8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e90:	4620      	mov	r0, r4
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	200004f8 	.word	0x200004f8

08002e98 <_malloc_r>:
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9c:	1ccd      	adds	r5, r1, #3
 8002e9e:	f025 0503 	bic.w	r5, r5, #3
 8002ea2:	3508      	adds	r5, #8
 8002ea4:	2d0c      	cmp	r5, #12
 8002ea6:	bf38      	it	cc
 8002ea8:	250c      	movcc	r5, #12
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	4607      	mov	r7, r0
 8002eae:	db01      	blt.n	8002eb4 <_malloc_r+0x1c>
 8002eb0:	42a9      	cmp	r1, r5
 8002eb2:	d905      	bls.n	8002ec0 <_malloc_r+0x28>
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4630      	mov	r0, r6
 8002ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ec0:	4e2e      	ldr	r6, [pc, #184]	; (8002f7c <_malloc_r+0xe4>)
 8002ec2:	f000 f907 	bl	80030d4 <__malloc_lock>
 8002ec6:	6833      	ldr	r3, [r6, #0]
 8002ec8:	461c      	mov	r4, r3
 8002eca:	bb34      	cbnz	r4, 8002f1a <_malloc_r+0x82>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7ff ffc2 	bl	8002e58 <sbrk_aligned>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	d14d      	bne.n	8002f76 <_malloc_r+0xde>
 8002eda:	6834      	ldr	r4, [r6, #0]
 8002edc:	4626      	mov	r6, r4
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	d140      	bne.n	8002f64 <_malloc_r+0xcc>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	4631      	mov	r1, r6
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	eb04 0803 	add.w	r8, r4, r3
 8002eec:	f000 f848 	bl	8002f80 <_sbrk_r>
 8002ef0:	4580      	cmp	r8, r0
 8002ef2:	d13a      	bne.n	8002f6a <_malloc_r+0xd2>
 8002ef4:	6821      	ldr	r1, [r4, #0]
 8002ef6:	3503      	adds	r5, #3
 8002ef8:	1a6d      	subs	r5, r5, r1
 8002efa:	f025 0503 	bic.w	r5, r5, #3
 8002efe:	3508      	adds	r5, #8
 8002f00:	2d0c      	cmp	r5, #12
 8002f02:	bf38      	it	cc
 8002f04:	250c      	movcc	r5, #12
 8002f06:	4629      	mov	r1, r5
 8002f08:	4638      	mov	r0, r7
 8002f0a:	f7ff ffa5 	bl	8002e58 <sbrk_aligned>
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d02b      	beq.n	8002f6a <_malloc_r+0xd2>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	442b      	add	r3, r5
 8002f16:	6023      	str	r3, [r4, #0]
 8002f18:	e00e      	b.n	8002f38 <_malloc_r+0xa0>
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	1b52      	subs	r2, r2, r5
 8002f1e:	d41e      	bmi.n	8002f5e <_malloc_r+0xc6>
 8002f20:	2a0b      	cmp	r2, #11
 8002f22:	d916      	bls.n	8002f52 <_malloc_r+0xba>
 8002f24:	1961      	adds	r1, r4, r5
 8002f26:	42a3      	cmp	r3, r4
 8002f28:	6025      	str	r5, [r4, #0]
 8002f2a:	bf18      	it	ne
 8002f2c:	6059      	strne	r1, [r3, #4]
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	bf08      	it	eq
 8002f32:	6031      	streq	r1, [r6, #0]
 8002f34:	5162      	str	r2, [r4, r5]
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	4638      	mov	r0, r7
 8002f3a:	f104 060b 	add.w	r6, r4, #11
 8002f3e:	f000 f8cf 	bl	80030e0 <__malloc_unlock>
 8002f42:	f026 0607 	bic.w	r6, r6, #7
 8002f46:	1d23      	adds	r3, r4, #4
 8002f48:	1af2      	subs	r2, r6, r3
 8002f4a:	d0b6      	beq.n	8002eba <_malloc_r+0x22>
 8002f4c:	1b9b      	subs	r3, r3, r6
 8002f4e:	50a3      	str	r3, [r4, r2]
 8002f50:	e7b3      	b.n	8002eba <_malloc_r+0x22>
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	bf0c      	ite	eq
 8002f58:	6032      	streq	r2, [r6, #0]
 8002f5a:	605a      	strne	r2, [r3, #4]
 8002f5c:	e7ec      	b.n	8002f38 <_malloc_r+0xa0>
 8002f5e:	4623      	mov	r3, r4
 8002f60:	6864      	ldr	r4, [r4, #4]
 8002f62:	e7b2      	b.n	8002eca <_malloc_r+0x32>
 8002f64:	4634      	mov	r4, r6
 8002f66:	6876      	ldr	r6, [r6, #4]
 8002f68:	e7b9      	b.n	8002ede <_malloc_r+0x46>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f000 f8b6 	bl	80030e0 <__malloc_unlock>
 8002f74:	e7a1      	b.n	8002eba <_malloc_r+0x22>
 8002f76:	6025      	str	r5, [r4, #0]
 8002f78:	e7de      	b.n	8002f38 <_malloc_r+0xa0>
 8002f7a:	bf00      	nop
 8002f7c:	200004f4 	.word	0x200004f4

08002f80 <_sbrk_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4d06      	ldr	r5, [pc, #24]	; (8002f9c <_sbrk_r+0x1c>)
 8002f84:	2300      	movs	r3, #0
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	f7fd fe30 	bl	8000bf0 <_sbrk>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d102      	bne.n	8002f9a <_sbrk_r+0x1a>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	b103      	cbz	r3, 8002f9a <_sbrk_r+0x1a>
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	bd38      	pop	{r3, r4, r5, pc}
 8002f9c:	200004fc 	.word	0x200004fc

08002fa0 <__sread>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa8:	f000 f8a0 	bl	80030ec <_read_r>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	bfab      	itete	ge
 8002fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fb4:	181b      	addge	r3, r3, r0
 8002fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fba:	bfac      	ite	ge
 8002fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fbe:	81a3      	strhlt	r3, [r4, #12]
 8002fc0:	bd10      	pop	{r4, pc}

08002fc2 <__swrite>:
 8002fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc6:	461f      	mov	r7, r3
 8002fc8:	898b      	ldrh	r3, [r1, #12]
 8002fca:	05db      	lsls	r3, r3, #23
 8002fcc:	4605      	mov	r5, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	d505      	bpl.n	8002fe0 <__swrite+0x1e>
 8002fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd8:	2302      	movs	r3, #2
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f000 f868 	bl	80030b0 <_lseek_r>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	4632      	mov	r2, r6
 8002fee:	463b      	mov	r3, r7
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff6:	f000 b817 	b.w	8003028 <_write_r>

08002ffa <__sseek>:
 8002ffa:	b510      	push	{r4, lr}
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003002:	f000 f855 	bl	80030b0 <_lseek_r>
 8003006:	1c43      	adds	r3, r0, #1
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	bf15      	itete	ne
 800300c:	6560      	strne	r0, [r4, #84]	; 0x54
 800300e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003016:	81a3      	strheq	r3, [r4, #12]
 8003018:	bf18      	it	ne
 800301a:	81a3      	strhne	r3, [r4, #12]
 800301c:	bd10      	pop	{r4, pc}

0800301e <__sclose>:
 800301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003022:	f000 b813 	b.w	800304c <_close_r>
	...

08003028 <_write_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d07      	ldr	r5, [pc, #28]	; (8003048 <_write_r+0x20>)
 800302c:	4604      	mov	r4, r0
 800302e:	4608      	mov	r0, r1
 8003030:	4611      	mov	r1, r2
 8003032:	2200      	movs	r2, #0
 8003034:	602a      	str	r2, [r5, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f7fd fd89 	bl	8000b4e <_write>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_write_r+0x1e>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_write_r+0x1e>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	200004fc 	.word	0x200004fc

0800304c <_close_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4d06      	ldr	r5, [pc, #24]	; (8003068 <_close_r+0x1c>)
 8003050:	2300      	movs	r3, #0
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7fd fd95 	bl	8000b86 <_close>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_close_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_close_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	200004fc 	.word	0x200004fc

0800306c <_fstat_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4d07      	ldr	r5, [pc, #28]	; (800308c <_fstat_r+0x20>)
 8003070:	2300      	movs	r3, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	f7fd fd90 	bl	8000b9e <_fstat>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d102      	bne.n	8003088 <_fstat_r+0x1c>
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	b103      	cbz	r3, 8003088 <_fstat_r+0x1c>
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	200004fc 	.word	0x200004fc

08003090 <_isatty_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4d06      	ldr	r5, [pc, #24]	; (80030ac <_isatty_r+0x1c>)
 8003094:	2300      	movs	r3, #0
 8003096:	4604      	mov	r4, r0
 8003098:	4608      	mov	r0, r1
 800309a:	602b      	str	r3, [r5, #0]
 800309c:	f7fd fd8f 	bl	8000bbe <_isatty>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_isatty_r+0x1a>
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_isatty_r+0x1a>
 80030a8:	6023      	str	r3, [r4, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	200004fc 	.word	0x200004fc

080030b0 <_lseek_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4d07      	ldr	r5, [pc, #28]	; (80030d0 <_lseek_r+0x20>)
 80030b4:	4604      	mov	r4, r0
 80030b6:	4608      	mov	r0, r1
 80030b8:	4611      	mov	r1, r2
 80030ba:	2200      	movs	r2, #0
 80030bc:	602a      	str	r2, [r5, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	f7fd fd88 	bl	8000bd4 <_lseek>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_lseek_r+0x1e>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_lseek_r+0x1e>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	200004fc 	.word	0x200004fc

080030d4 <__malloc_lock>:
 80030d4:	4801      	ldr	r0, [pc, #4]	; (80030dc <__malloc_lock+0x8>)
 80030d6:	f7ff be0b 	b.w	8002cf0 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	200004f0 	.word	0x200004f0

080030e0 <__malloc_unlock>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__malloc_unlock+0x8>)
 80030e2:	f7ff be06 	b.w	8002cf2 <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	200004f0 	.word	0x200004f0

080030ec <_read_r>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4d07      	ldr	r5, [pc, #28]	; (800310c <_read_r+0x20>)
 80030f0:	4604      	mov	r4, r0
 80030f2:	4608      	mov	r0, r1
 80030f4:	4611      	mov	r1, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	602a      	str	r2, [r5, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7fd fd0a 	bl	8000b14 <_read>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_read_r+0x1e>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	b103      	cbz	r3, 800310a <_read_r+0x1e>
 8003108:	6023      	str	r3, [r4, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	200004fc 	.word	0x200004fc

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
